Q-21). Create a Spring Boot application that inserts data into a MySQL database table using
JPA and Hibernate. The application should use Spring Data JPA to map the table to a
Java object and then insert the data into the table.


spring.datasource.url=jdbc:mysql://localhost:3306/your_database_name
spring.datasource.username=root
spring.datasource.password=Mysql22@
spring.jpa.hibernate.ddl-auto=update



import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String email;

    // Constructors, getters, setters
}


import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {



}



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UserService {
    private final UserRepository userRepository;

    @Autowired
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public void saveUser(User user) {
        userRepository.save(user);
    }
}




import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class UserController {
    private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/users")
    public void insertUser(@RequestBody User user) {
        userService.saveUser(user);
    }
}



Q-22) Create a Spring Boot application that uses Spring Data JPA to retrieve data from a database. The application should have entities for users and orders, and should
allow for querying orders by user.

spring.datasource.url=jdbc:mysql://localhost:3306/your_database_name
spring.datasource.username=root
spring.datasource.password=Mysql22@
spring.jpa.hibernate.ddl-auto=update



import javax.persistence.*;

@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String email;

    // Constructors, getters, setters
}



import javax.persistence.*;

@Entity
public class Order {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    
    private Long id;
    private String productName;
    private double amount;
    
    
    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

  public String getId() {
        return data1;
    }

    public void setId(String id) {
        this.data1 = data1;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id= id;
    }

   

    @Override
    public String toString() {
        return "DataEntity{" + " id='" + id + '\'' + ", productName='" + producName + amount ='" + amount + '\'' +
                ", '}';
    } 
    
    
}

import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
}


import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface OrderRepository extends JpaRepository<Order, Long> {
    List<Order> findByUser(User user);
}




import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;

@RestController
public class OrderController {
    private final OrderRepository orderRepository;

    @Autowired
    public OrderController(OrderRepository orderRepository) {
        this.orderRepository = orderRepository;
    }

    @GetMapping("/orders/user/{userId}")
    public List<Order> getOrdersByUserId(@PathVariable Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("Invalid user ID: " + userId));

        return orderRepository.findByUser(user);
    }
}



Q-23) Create a Spring MVC application that allows users to register and login. The
application should have a registration form that accepts user details and a login form
that authenticates users.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Autowired
    private CustomUserDetailsService userDetailsService;

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/registration").permitAll()
                .anyRequest().authenticated()
                .and()
            .formLogin()
                .loginPage("/login")
                .defaultSuccessUrl("/home")
                .permitAll()
                .and()
            .logout()
                .permitAll();
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService);
    }
}



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

@Controller
public class UserController {

    @Autowired
    private UserService userService;

    @GetMapping("/registration")
    public String showRegistrationForm(Model model) {
        model.addAttribute("user", new User());
        return "registration";
    }

    @PostMapping("/registration")
    public String registerUser(@ModelAttribute("user") User user) {
        userService.register(user);
        return "redirect:/login";
    }
}



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private BCryptPasswordEncoder passwordEncoder;

    public void register(User user) {
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        userRepository.save(user);
    }
}



import org.springframework.data.repository.CrudRepository;

public interface UserRepository extends CrudRepository<User, Long> {
    User findByUsername(String username);
}


<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>User Registration</title>
</head>
<body>
    <h2>User Registration</h2>
    <form action="#" th:action="@{/registration}" th:object="${user}" method="post">
        <label for="username">Username:</label>
        <input type="text" id="username" th:field="*{username}" required/>
        <br/>
        <label for="password">Password:</label>
        <input type="password" id="password" th:field="*{password}" required/>
        <br/>
        <button type="submit">Register</button>
    </form>
</body>
</html>




import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class LoginController {

    @GetMapping("/login")
    public String showLoginForm() {
        return "login";
    }
}




<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>User Login</title>
</head>
<body>
    <h2>User Login</h2>
    <form action="#" th:action="@{/login}" method="post">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required/>
        <br/>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required/>
        <br/>
        <button type="submit">Login</button>
    </form>
</body>
</html>





<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>User Registration</title>
</head>
<body>
    <h2>User Registration</h2>
    <form action="#" th:action="@{/registration}" th:object="${user}" method="post">
        <label for="username">Username:</label>
        <input type="text" id="username" th:field="*{username}" required/>
        <br/>
        <label for="password">Password:</label>
        <input type="password" id="password" th:field="*{password}" required/>
        <br/>
        <button type="submit">Register</button>
    </form>
</body>
</html>




<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title> ser Login </title>
</head>
<body>
    <h2>User Login</h2>
    <form action="#" th:action="@{/login}" method="post">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required/>
        <br/>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required/>
        <br/>
        <button type="submit">Login</button>
    </form>
</body>
</html>



import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addViewControllers(ViewControllerRegistry registry) {
        registry.addViewController("/").setViewName("home");
        registry.addViewController("/login").setViewName("login");
        registry.addViewController("/registration").setViewName("registration");
    }
}



<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Home</title>
</head>
<body>
    <h2>Welcome to the Home Page</h2>
</body>
</html>




Q-24)   Create a Spring Boot application that uses Spring MVC to create a REST API. The API should accept a JSON request with data and insert it into a MySQL database
table using JPA and Hibernate. The application should use Spring Data JPA to map the table to a Java object and then insert the data into the table.


spring.datasource.url=jdbc:mysql://localhost:3306/your_database_name
spring.datasource.username=root
spring.datasource.password=Mysql22@
spring.jpa.hibernate.ddl-auto=update



import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class DataEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String data1;
    private String data2;

    // Getters and setters
    
       public String getData1() {
        return data1;
    }

    public void setData1(String data1) {
        this.data1 = data1;
    }

    public String getData1() {
        return data1;
    }

    public void setData1(String data1) {
        this.data1 = data1;
    }

   

    @Override
    public String toString() {
        return "DataEntity{" + "data1='" + data1 + '\'' + ", data2='" + data2 + '}';
    } 
    
    
    
}


import org.springframework.data.jpa.repository.JpaRepository;

public interface DataEntityRepository extends JpaRepository<DataEntity, Long> {
}


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class DataController {

    @Autowired
    private DataEntityRepository dataEntityRepository;

    @PostMapping("/data")
    public DataEntity insertData(@RequestBody DataEntity dataEntity) {
        return dataEntityRepository.save(dataEntity);
    }
}




Q-25) Create a Spring Boot application that uses Spring AOP to log method calls. The
application should have a service class with methods that perform operations. The
application should use Spring AOP to log the method calls with input and output
parameters to the console.


<!-- Add Spring Boot dependencies -->
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>

    <!-- Add Spring AOP dependency -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-aop</artifactId>
    </dependency>
</dependencies>



import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class LoggingAspect {

    @Before("execution(* com.example.demo.service.*.*(..))")
    public void logMethodCall(JoinPoint joinPoint) {
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String methodName = joinPoint.getSignature().getName();
        Object[] arguments = joinPoint.getArgs();

        System.out.println("Executing method: " + className + "." + methodName);
        System.out.println("Arguments: " + Arrays.toString(arguments));
    }

    @AfterReturning(
            pointcut = "execution(* com.example.demo.service.*.*(..))",
            returning = "result"
    )
    public void logMethodReturn(JoinPoint joinPoint, Object result) {
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String methodName = joinPoint.getSignature().getName();

        System.out.println("Method executed: " + className + "." + methodName);
        System.out.println("Returned value: " + result);
    }
}




import org.springframework.stereotype.Service;

@Service
public class SampleService {

    public int add(int a, int b) {
        return a + b;
    }

    public String concatenate(String str1, String str2) {
        return str1 + str2;
    }
}



import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}


Q-26) Create a Spring Boot application that exposes a REST API for managing a list of products. The API should allow for creating, updating, deleting, and retrieving
products.



package com.example.productmanager.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private double price;

   
    
    public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public double getPrice() {
		return price;
	}
	public void setPrice(double price) {
		this.price = price;
	}
    
}


package com.example.productmanager.repository;

import com.example.productmanager.model.Product;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ProductRepository extends JpaRepository<Product, Long> {

}

package com.example.productmanager.service;

import com.example.productmanager.model.Product;
import com.example.productmanager.repository.ProductRepository;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ProductService {
    private final ProductRepository productRepository;

    @Autowired
    public ProductService(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    public List<Product> getAllProducts() {
        return productRepository.findAll();
    }

    public Optional<Product> getProductById(Long id) {
        return productRepository.findById(id);
    }

    public Product createProduct(Product product) {
        return productRepository.save(product);
    }

    public Optional<Product> updateProduct(Long id, Product product) {
        Optional<Product> optionalProduct = productRepository.findById(id);
        optionalProduct.ifPresent(existingProduct -> {
            BeanUtils.copyProperties(product, existingProduct, "id");
            productRepository.save(existingProduct);
        });
        return optionalProduct;
    }

    public void deleteProduct(Long id) {
        productRepository.deleteById(id);
    }
}


package com.example.productmanager.controller;

import com.example.productmanager.model.Product;
import com.example.productmanager.service.ProductService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/products")
public class ProductController {
    private final ProductService productService;

    @Autowired
    public ProductController(ProductService productService) {
        this.productService = productService;
    }

    @GetMapping
    public ResponseEntity<List<Product>> getAllProducts() {
        List<Product> products = productService.getAllProducts();
        return ResponseEntity.ok(products);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Product> getProductById(@PathVariable Long id) {
        Optional<Product> optionalProduct = productService.getProductById(id);
        return optionalProduct.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<Product> createProduct(@RequestBody Product product) {
        Product createdProduct = productService.createProduct(product);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdProduct);
    }

    @PutMapping("/{id}")
         public ResponseEntity<Product> updateProduct(@PathVariable Long id, @RequestBody Product product) {
           Optional<Product> optionalProduct = productService.updateProduct(id, product);
           return optionalProduct.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
       }

       @DeleteMapping("/{id}")
       public ResponseEntity<Void> deleteProduct(@PathVariable Long id) {
           productService.deleteProduct(id);
           return ResponseEntity.noContent().build();
       }
   }


Q-27) Create a Spring Boot application that uses Spring Cloud to register a service with Eureka Server. The application should expose a REST API for retrieving data from a
database and the API should be discovered by Eureka Server.

spring.application.name=eureka-server
server.port=8761
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false



spring.application.name=product-service
server.port=8080
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/



package com.example.productservice.client;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;

@FeignClient("product-service")
public interface ProductClient {

    @GetMapping("/api/products")
    String getProducts();
}


package com.example.productservice.controller;

import com.example.productservice.client.ProductClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ProductController {

    private final ProductClient productClient;

    @Autowired
    public ProductController(ProductClient productClient) {
        this.productClient = productClient;
    }

    @GetMapping("/api/products")
    public String getProducts() {
        return "Retrieving products from the database...";
        // Implement your logic here to retrieve data from the database
    }

    @GetMapping("/api/products/service")
    public String getService() {
        return productClient.getProducts();
    }
}




Q-28) Create a Spring Boot application that uses Spring Cloud Config Server to externalise configuration. The application should have a property file that defines properties for
database connection and other application settings.


spring.application.name=config-server
spring.cloud.config.server.git.uri=https://github.com/your-git-repo.git
spring.cloud.config.server.git.clone-on-start=true


# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/your-database-name?useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=Mysql22@

# Other Application Settings
app.setting1=value1
app.setting2=value2


spring.application.name=my-application
spring.cloud.config.uri=http://localhost:8888



import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;



// Spring Boot application class
@SpringBootApplication
public class SpringCloudConfigClientApplication {

    public static void main(String[] args) {
        SpringApplication.run(SpringCloudConfigClientApplication.class, args);
    }
}

// Controller class that reads properties from the config server
@RestController
public class ConfigClientController {

    @Value("${app.name}")
    private String appName;

    @Value("${app.description}")
    private String appDescription;

    @Value("${spring.datasource.url}")
    private String dataSourceUrl;

    @Value("${spring.datasource.username}")
    private String dataSourceUsername;

    @Value("${spring.datasource.password}")
    private String dataSourcePassword;

    @GetMapping("/config")
    public String getConfig() {
        return "App name: " + appName + "\n" +
                "App description: " + appDescription + "\n" +
                "Data source URL: " + dataSourceUrl + "\n" +
                "Data source username: " + dataSourceUsername + "\n" +
                "Data source password: " + dataSourcePassword;
    }
}





Q-29) Create a Spring Boot application that uses Spring Data JPA to retrieve data from a database and expose it as a REST API. The API should allow for filtering, sorting,
and paging.



// Spring Boot application class
@SpringBootApplication
public class SpringDataJpaRestApplication {

    public static void main(String[] args) {
        SpringApplication.run(SpringDataJpaRestApplication.class, args);
    }
}

// Entity class that represents a book
@Entity
@Table(name = "books")
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String title;

    @Column(nullable = false)
    private String author;

    @Column(nullable = false)
    private int year;

    // Getters and setters omitted for brevity
}

// Repository interface that extends JpaRepository and provides methods for filtering, sorting, and paging
public interface BookRepository extends JpaRepository<Book, Long> {

    // Find books by title containing a keyword
    Page<Book> findByTitleContaining(String keyword, Pageable pageable);

    // Find books by author containing a keyword
    Page<Book> findByAuthorContaining(String keyword, Pageable pageable);

    // Find books by year equal to a value
    Page<Book> findByYear(int year, Pageable pageable);
}

// Controller class that exposes the book repository as a REST API
@RestController
@RequestMapping("/api/books")
public class BookController {

    @Autowired
    private BookRepository bookRepository;

    // Get all books with optional filtering, sorting, and paging parameters
    @GetMapping
    public ResponseEntity<Page<Book>> getAllBooks(
            @RequestParam(required = false) String title,
            @RequestParam(required = false) String author,
            @RequestParam(required = false) Integer year,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "id") String sort) {

        try {
            Pageable pageable = PageRequest.of(page, size, Sort.by(sort));
            Page<Book> books;

            if (title != null) {
                // Filter by title
                books = bookRepository.findByTitleContaining(title, pageable);
            } else if (author != null) {
                // Filter by author
                books = bookRepository.findByAuthorContaining(author, pageable);
            } else if (year != null) {
                // Filter by year
                books = bookRepository.findByYear(year, pageable);
            } else {
                // No filter
                books = bookRepository.findAll(pageable);
            }

            return new ResponseEntity<>(books, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // Get a single book by id
    @GetMapping("/{id}")
    public ResponseEntity<Book> getBookById(@PathVariable("id") long id) {
        Optional<Book> bookData = bookRepository.findById(id);

        if (bookData.isPresent()) {
            return new ResponseEntity<>(bookData.get(), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Create a new book
    @PostMapping
    public ResponseEntity<Book> createBook(@RequestBody Book book) {
        try {
            Book _book = bookRepository.save(new Book(book.getTitle(), book.getAuthor(), book.getYear()));
            return new ResponseEntity<>(_book, HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // Update an existing book by id
    @PutMapping("/{id}")
    public ResponseEntity<Book> updateBook(@PathVariable("id") long id, @RequestBody Book book) {
        Optional<Book> bookData = bookRepository.findById(id);

        if (bookData.isPresent()) {
            Book _book = bookData.get();
            book.setTitle(book.getTitle());
            book.setAuthor(book.getAuthor());
            book.setYear(book.getYear());
            return new ResponseEntity<>(bookRepository.save(_book), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Delete an existing book by id
    @DeleteMapping("/{id}")
    public ResponseEntity<HttpStatus> deleteBook(@PathVariable("id") long id) {
        try {
            bookRepository.deleteById(id);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}




Q- 30) Create a Spring Boot application that uses Spring Cloud Circuit Breaker to handle  failures in a REST API. The API should use a circuit breaker pattern to handle
timeouts and other errors.


// Spring Boot application class
@SpringBootApplication
public class SpringCloudCircuitBreakerApplication {

    public static void main(String[] args) {
        SpringApplication.run(SpringCloudCircuitBreakerApplication.class, args);
    }
}

// Service class that calls an external API and uses a circuit breaker to handle failures
@Service
public class BookService {

    @Autowired
    private RestTemplate restTemplate;

    // Create a circuit breaker factory with the default configuration
    private CircuitBreakerFactory circuitBreakerFactory = new Resilience4JCircuitBreakerFactory();

    // Define a fallback method that returns a default value when the circuit breaker is open
    public String fallback(Throwable t) {
        return "The external API is not available. Please try again later.";
    }

    // Define a method that calls the external API and uses the circuit breaker
    public String getBooks() {
        // Create a circuit breaker with the name "books" and the fallback method
        CircuitBreaker circuitBreaker = circuitBreakerFactory.create("books", this::fallback);

        // Wrap the API call with the circuit breaker
        return circuitBreaker.run(() -> restTemplate.getForObject("http://external-api.com/books", String.class));
    }
}

// Controller class that exposes the book service as a REST API
@RestController
@RequestMapping("/api/books")
public class BookController {

    @Autowired
    private BookService bookService;

    // Get books from the external API using the circuit breaker
    @GetMapping
    public String getBooks() {
        return bookService.getBooks();
    }
}















































